---
# Operation mode
## mode: deployment
## deployment: long-running Deployment
mode: deployment
## namespaced: true | false
## true: can only interact with resources spawned in the same namespace
## false: can interact with resources spawned in different namespaces
namespaced: false

# Common values
commonLabels: {}
commonAnnotations: {}
nameOverride: ""
fullnameOverride: ""

# Application container :: custom configuration
image:
  repository: ghcr.io/isometry/platform-health
  tag: ~
  pullPolicy: IfNotPresent

replicaCount: 1

# Arguments to pass to the platform-health server
serverArgs: &args
  - -vv

# Define the health checks for the application
# config: {provider: [target]}
# @see the provider specific README.md for more information on how it can be configured
#
## Example: basic health checks
#
# serverConfig:
#   tcp:
#     - name: ssh@localhost
#       host: localhost
#       port: 22
#   tls:
#     - name: gmail
#       host: smtp.gmail.com
#       port: 465
#   http:
#     - name: google
#       url: https://google.com
serverConfig: {}

# Deployment :: custom configuration
## deployment-mode: deactivated if the job mode is enabled
deployment:
  # Container :: custom configuration
  container:
    port: &port 8080
    args: *args
  extraLabels: {}
  annotations: {}

# Service :: custom configuration
service:
  enabled: true
  type: LoadBalancer
  port: *port
  extraLabels: {}
  annotations: {}

ingress:
  enabled: false
  className: "" # e.g. nginx
  extraLabels: {}
  annotations: {}
  hosts: []
  # - platform-health.local
  paths: [/]
  pathType: Prefix
  tls: []
  # - hosts:
  #     - platform-health.local
  #   secretName: platform-health-tls

# Resources to provide to the platform-health pod.
#
# For example:
#  requests:
#    cpu: 100m
#    memory: 32Mi
#
# For more information, see [Resource Management for Pods and Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
resources: {}

# Pod Security Context.
# For more information, see [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
# +docs:property
securityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

# Container Security Context to be set on the controller component container.
# For more information, see [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
# +docs:property
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true

# The nodeSelector on Pods tells Kubernetes to schedule Pods on the nodes with
# matching labels.
# For more information, see [Assigning Pods to Nodes](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/).
#
# This default ensures that Pods are only scheduled to Linux nodes.
# It prevents Pods being scheduled to Windows nodes in a mixed OS cluster.
# +docs:property
nodeSelector:
  kubernetes.io/os: linux

# A Kubernetes Affinity, if required. For more information, see [Affinity v1 core](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#affinity-v1-core).
#
# For example:
#   affinity:
#     nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#        - matchExpressions:
#          - key: foo.bar.com/role
#            operator: In
#            values:
#            - master
affinity: {}

# A list of Kubernetes Tolerations, if required. For more information, see [Toleration v1 core](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#toleration-v1-core).
#
# For example:
#   tolerations:
#   - key: foo.bar.com/role
#     operator: Equal
#     value: master
#     effect: NoSchedule
tolerations: []

# A list of Kubernetes TopologySpreadConstraints, if required. For more information, see [Topology spread constraint v1 core](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#topologyspreadconstraint-v1-core
#
# For example:
#   topologySpreadConstraints:
#   - maxSkew: 2
#     topologyKey: topology.kubernetes.io/zone
#     whenUnsatisfiable: ScheduleAnyway
#     labelSelector:
#       matchLabels:
#         app.kubernetes.io/instance: cert-manager
#         app.kubernetes.io/component: controller
topologySpreadConstraints: []

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: true
  # Role :: custom configuration
  role:
    # Allows the application to read the Secrets
    enableSecrets: false
    # Allows the application to read the ConfigMaps
    enableConfigMaps: true
    # Allows the application to read the Deployments, ReplicaSets, StatefulSets & DaemonSets
    enableDeployments: true
    # Allows the application to read Jobs & CronJobs
    enableJobs: true
    # Allows the application to read the resources scoped to 'cert-manager.io'
    enableCertManager: true
    # Allows the application to read ArgoCD Applications scoped to 'argoproj.io'
    enableArgoApplications: true
    # Allows the application to read the resources scoped to 'networking.k8s.io'
    enableNetworking: true
    # Allows the application to read the resources scoped to 'storage.k8s.io'
    enableStorage: true
    # Allows the application to read the resources scoped to 'policy'
    enablePodDisruptionBudgets: true
    # Allows the application to read ArgoCD ApplicationSets scoped to 'argoproj.io'
    enableArgoApplicationSets: true
