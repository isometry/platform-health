syntax = "proto3";

package platform_health.v1;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/isometry/platform-health/pkg/platform_health";

service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse) {}
}

message HealthCheckRequest {
  // allow specification of restricted subset of components to validate
  string component = 1; // TODO: define syntax for specifying component
  repeated string hops = 2; // list of server IDs for loop detection
}

message HealthCheckResponse {
  string type = 1; // e.g. "tcp", "rest", "grpc", "kafka", "s3"
  string name = 2; // instance name
  optional string serverId = 3; // unique identifier for server/satellite instance
  Status status = 4;
  string message = 5;
  repeated google.protobuf.Any details = 6;
  repeated HealthCheckResponse components = 7;
  google.protobuf.Duration duration = 8;
}

enum Status {
  UNKNOWN = 0;
  HEALTHY = 1;
  UNHEALTHY = 2;
  LOOP_DETECTED = 3;
}
