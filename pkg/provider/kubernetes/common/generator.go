package main

import (
	"fmt"
	"os"
	"sort"
)

type GV struct {
	Group   string
	Version string
}

var commonGVToKinds = map[GV][]string{
	{Group: "", Version: "v1"}: {
		"configmap", "cm",
		"namespace", "ns",
		"node", "no",
		"pod", "po",
		"service", "svc",
		"secret", "sec",
		"persistentvolume", "pv",
		"persistentvolumeclaim", "pvc",
		"storageclass", "sc",
	},
	{Group: "apps", Version: "v1"}: {
		"deployment", "deploy",
		"statefulset", "sts",
		"daemonset", "ds",
		"replicaset", "rs",
	},
	{Group: "batch", Version: "v1"}: {
		"job",
		"cronjob",
	},
	{Group: "cert-manager.io", Version: "v1"}: {
		"clusterissuer",
		"issuer",
		"certificate",
	},
	{Group: "networking.k8s.io", Version: "v1"}: {
		"ingressclass",
		"ingress",
		"networkpolicy",
	},
	{Group: "policy", Version: "v1"}: {
		"poddisruptionbudget", "pdb",
		"podsecuritypolicy", "psp",
	},
}

func main() {
	output := make(map[string]GV)
	for key, values := range commonGVToKinds {
		for _, value := range values {
			output[value] = key
		}
	}

	file, err := os.Create("common_generated.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	fmt.Fprintln(file, "// Code generated by go generate; DO NOT EDIT.")
	fmt.Fprintln(file, "// Amend via commonGVToKinds in ./common/generator.go")
	fmt.Fprintln(file, "package kubernetes")
	fmt.Fprintln(file, "")
	fmt.Fprintln(file, "var commonKindToGV = map[string]GV{")
	keys := make([]string, 0, len(output))
	for key := range output {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	for _, key := range keys {
		value := output[key]
		fmt.Fprintf(file, "\t%q: {Group: %q, Version: %q},\n", key, value.Group, value.Version)
	}
	fmt.Fprintln(file, "}")
}
